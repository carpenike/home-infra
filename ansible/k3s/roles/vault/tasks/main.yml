---

- name: Wait for Consul to be ready
  command: "{{ item }}"
  with_items:
    - kubectl -n kube-system wait --for condition=Ready pod/consul-consul-server-0
  register: consul_pod_status
  environment:
    KUBECONFIG: "{{ REPO_ROOT }}/kubeconfig"
  changed_when: "'pod/consul-consul-server-0 condition met' in consul_pod_status.stdout"
  until: "'pod/consul-consul-server-0 condition met' in consul_pod_status.stdout"
  retries: 30
  delay: 60

- name: Wait for Vault to be ready
  command: "{{ item }}"
  with_items:
    - kubectl -n kube-system wait --for condition=Initialized pod/vault-0
  register: vault_pod_status
  environment:
    KUBECONFIG: "{{ REPO_ROOT }}/kubeconfig"
  changed_when: "'pod/vault-0 condition met' in vault_pod_status.stdout"
  until: "'pod/vault-0 condition met' in vault_pod_status.stdout"
  retries: 30
  delay: 60

- name: Check Vault Initialized Status
  shell: kubectl -n kube-system exec "vault-0" -- vault status -format=json 2> /dev/null | jq -r '.initialized'
  register: initialized_vault_status
  environment:
    KUBECONFIG: "{{ REPO_ROOT }}/kubeconfig"
  until: "'false' or 'true' in initialized_vault_status.stdout"
  retries: 30
  delay: 30

- debug:
    var: initialized_vault_status

- name: Check Vault Sealed Status
  shell: kubectl -n kube-system exec "vault-0" -- vault status -format=json 2> /dev/null | jq -r '.sealed'
  register: sealed_vault_status
  environment:
    KUBECONFIG: "{{ REPO_ROOT }}/kubeconfig"
  until: "'false' or 'true' in sealed_vault_status.stdout"
  retries: 30
  delay: 30

- name: Initialize Vault
  shell: kubectl -n kube-system exec "vault-0" -- vault operator init -format json -recovery-shares=1 -recovery-threshold=1
  register: initialize_vault_status
  when: ( initialized_vault_status.stdout == "false" )
  environment:
    KUBECONFIG: "{{ REPO_ROOT }}/kubeconfig"

- name: Store Recovery & Root Token
  set_fact:
    VAULT_RECOVERY_TOKEN: "{{ (initialize_vault_status.stdout | from_json).unseal_keys_b64 }}"
    VAULT_ROOT_TOKEN: "{{ (initialize_vault_status.stdout | from_json).root_token }}"
  when: ( initialized_vault_status.stdout == "false" )

- name: Decrypt Vault Secret File
  ignore_errors: yes
  command: "ansible-vault decrypt group_vars/vault/encrypted-vault.yml"
  register: vault_decrypt
  when: ( initialized_vault_status.stdout == "false" )

- name: Update ansible-vault secret with root token
  lineinfile:
   dest: "{{ REPO_ROOT }}/ansible/group_vars/vault/encrypted-vault.yml"
   regexp: '^vault_VAULT_ROOT_TOKEN'
   line: "vault_VAULT_ROOT_TOKEN: {{ VAULT_ROOT_TOKEN }}"
  when: ( initialized_vault_status.stdout == "false" )

- name: Update ansible-vault secret with recovery token
  lineinfile:
   dest: "{{ REPO_ROOT }}/ansible/group_vars/vault/encrypted-vault.yml"
   regexp: '^vault_VAULT_RECOVERY_TOKEN:'
   line: "vault_VAULT_RECOVERY_TOKEN: {{ VAULT_RECOVERY_TOKEN }}"
  when: ( initialized_vault_status.stdout == "false" )

- name: Encrypt Vault Secret File
  command: "ansible-vault encrypt group_vars/vault/encrypted-vault.yml"
  register: vault_encrypt
  changed_when: "'Encryption successful' in vault_encrypt.stdout"
  when: ( initialized_vault_status.stdout == "false" )

- name: Unseal Vault (0)
  shell: kubectl -n kube-system exec "vault-0" -- vault operator unseal {{ item }}
  with_items: "{{ VAULT_RECOVERY_TOKEN }}"
  environment:
    KUBECONFIG: "{{ REPO_ROOT }}/kubeconfig"
  register: unseal_vault_status
  when: ( sealed_vault_status.stdout == "true" )

- name: Unseal Vault (1)
  shell: kubectl -n kube-system exec "vault-1" -- vault operator unseal {{ item }}
  with_items: "{{ VAULT_RECOVERY_TOKEN }}"
  environment:
    KUBECONFIG: "{{ REPO_ROOT }}/kubeconfig"
  register: unseal_vault_status
  when: ( sealed_vault_status.stdout == "true" )

- name: Unseal Vault (2)
  shell: kubectl -n kube-system exec "vault-2" -- vault operator unseal {{ item }}
  with_items: "{{ VAULT_RECOVERY_TOKEN }}"
  environment:
    KUBECONFIG: "{{ REPO_ROOT }}/kubeconfig"
  register: unseal_vault_status
  when: ( sealed_vault_status.stdout == "true" )

- name: Get Vault Service (Calico)
  shell: "{{ item }}"
  with_items:
    - kubectl get -n kube-system svc/vault -o jsonpath='{.spec.clusterIP}'
  environment:
    KUBECONFIG: "{{ REPO_ROOT }}/kubeconfig"
  register: vault_service_IP
  when: k3s_no_flannel == true

- name: Port Forward Vault Service (Flannel)
  shell: |
    nohup kubectl -n kube-system port-forward svc/vault 8200:8200 >/dev/null 2>&1 &
  environment:
    KUBECONFIG: "{{ REPO_ROOT }}/kubeconfig"
  when: k3s_no_flannel == false

- name: Set Vault_Service_IP to Fact (Calico)
  set_fact:
    VAULT_ADDR: "http://{{ vault_service_IP.results[0].stdout }}:8200"
  when: k3s_no_flannel == true

- name: Set Vault_Service_IP to Fact (Flannel)
  set_fact:
    VAULT_ADDR: "http://127.0.0.1:8200"
  when: k3s_no_flannel == false

- name: Login to Vault
  shell: "{{ item }}"
  with_items:
    - vault login $VAULT_ROOT_TOKEN
  environment:
    VAULT_ADDR: "{{ VAULT_ADDR }}"
    KUBECONFIG: "{{ REPO_ROOT }}/kubeconfig"
    VAULT_ROOT_TOKEN: "{{ VAULT_ROOT_TOKEN }}"
  register: vault_login
  until: vault_login is succeeded
  retries: 30
  delay: 30
  when: ( initialized_vault_status.stdout == "true" )

- name: Login to Vault (New Install)
  shell: "{{ item }}"
  with_items:
    - vault login $VAULT_ROOT_TOKEN
  environment:
    VAULT_ADDR: "{{ VAULT_ADDR }}"
    KUBECONFIG: "{{ REPO_ROOT }}/kubeconfig"
    VAULT_ROOT_TOKEN: "{{ VAULT_ROOT_TOKEN }}"
  register: vault_login
  when: ( initialized_vault_status.stdout == "false" )
  until: vault_login is succeeded
  retries: 30
  delay: 30

# - name: Show Vault Auth Providers
#   shell: "{{ item }}"
#   with_items:
#     - vault auth list
#   environment:
#     VAULT_ADDR: "{{ VAULT_ADDR }}"
#     KUBECONFIG: "{{ REPO_ROOT }}/kubeconfig"
#   register: vault_auth_list

- name: Enable Vault Secrets on Path "Secrets"
  shell: vault secrets enable -path=secrets -version=2 kv
  environment:
    VAULT_ADDR: "{{ VAULT_ADDR }}"
  when: ( initialized_vault_status.stdout == "false" )

- name: Create Kubernetes Auth Policy
  shell: |
    cat << EOF | vault policy write vault-secrets-operator -
    path "secrets/data/*" {
      capabilities= ["read"]
    }
    EOF
  environment:
    VAULT_ADDR: "{{ VAULT_ADDR }}"
  when: ( initialized_vault_status.stdout == "false" )

- name: Wait for Vault-Secret-Operator Service Account
  command: "{{ item }}"
  with_items:
    - kubectl -n kube-system get sa vault-secrets-operator
  environment:
    KUBECONFIG: "{{ REPO_ROOT }}/kubeconfig"
  register: sa_present
  changed_when: "sa_present is succeeded"
  until: "sa_present is succeeded"
  retries: 30
  delay: 60

- name: Get Vault Secrets Operator Namespace
  shell: kubectl -n kube-system get sa vault-secrets-operator -o jsonpath="{.metadata.namespace}"
  register: vault_secrets_operator_namespace
  when: ( initialized_vault_status.stdout == "false" )
  environment:
    KUBECONFIG: "{{ REPO_ROOT }}/kubeconfig"

- name: Get Vault Secret Name
  shell: kubectl -n kube-system get sa vault-secrets-operator -o jsonpath="{.secrets[*]['name']}"
  register: vault_secret_name
  when: ( initialized_vault_status.stdout == "false" )
  environment:
    KUBECONFIG: "{{ REPO_ROOT }}/kubeconfig"

- name: Get SA_JWT_TOKEN
  shell: kubectl -n kube-system get secret {{ vault_secret_name.stdout }} -o jsonpath="{.data.token}" | base64 --decode; echo
  register: sa_jwt_token
  when: ( initialized_vault_status.stdout == "false" )
  environment:
    KUBECONFIG: "{{ REPO_ROOT }}/kubeconfig"

- name: Get SA_CA_CRT
  shell: kubectl -n kube-system get secret {{ vault_secret_name.stdout }} -o jsonpath="{.data['ca\.crt']}" | base64 --decode; echo
  register: sa_ca_crt
  when: ( initialized_vault_status.stdout == "false" )
  environment:
    KUBECONFIG: "{{ REPO_ROOT }}/kubeconfig"

- name: Get K8S_HOST
  shell: kubectl -n kube-system config view --minify -o jsonpath='{.clusters[0].cluster.server}'
  register: k8s_host
  when: ( initialized_vault_status.stdout == "false" )
  environment:
    KUBECONFIG: "{{ REPO_ROOT }}/kubeconfig"

- name: Enable Kubernetes Authentication on Vault
  shell: vault auth enable kubernetes
  environment:
    VAULT_ADDR: "{{ VAULT_ADDR }}"
  register: k8s_auth_enable
  when: ( initialized_vault_status.stdout == "false" )

- name: Tell Vault how to Auth with K8S Cluster
  shell: |
    vault write auth/kubernetes/config \
      token_reviewer_jwt="{{ sa_jwt_token.stdout }}" \
      kubernetes_host="{{ k8s_host.stdout }}" \
      kubernetes_ca_cert="{{ sa_ca_crt.stdout }}"
  environment:
    VAULT_ADDR: "{{ VAULT_ADDR }}"
  when: ( initialized_vault_status.stdout == "false" )

- name: Create Vault-Secrets-Operator Role in Vault
  shell: |
    vault write auth/kubernetes/role/vault-secrets-operator \
      bound_service_account_names="vault-secrets-operator" \
      bound_service_account_namespaces="{{ vault_secrets_operator_namespace.stdout }}" \
      policies=vault-secrets-operator \
      ttl=24h
  environment:
    VAULT_ADDR: "{{ VAULT_ADDR }}"
  when: ( initialized_vault_status.stdout == "false" )

- name: Kill all kubectl port-forwards
  shell: killall kubectl
  when: k3s_no_flannel == false
